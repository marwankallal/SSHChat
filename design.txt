	The first decision I made was to keep this as a command line application. Compared the any GUI I would have built, there is very little difference from the command line interface, and they both do the exact same thing, but in the interest of time and simplicity, it's in the command line. I decided to create a multithreaded application to allow more than two people to communicate, and make it more of a chat room environment rather than a one on one chat, though its still possible with the @USR:: command (see documentation). 
	When you host a server, it constantly listens for incoming socket connections. When it hears one, it accepts it and creates a ServerThread that corresponds to it. The ServerThread listens to this new socket and whenever anything is written to the stream, it sends it over to the server, which can then filter @USR:: and send the message on to the rest of the users by writing out to the stream. 
	When a new client is made, it also creates a new ClientThread, which is what listens in to the stream and prints out all of the messages from other users, as well as prompting the user for input with ">". The client itself takes care of actual user input, writing any to the stream for the ServerThread and Server to manage, filter, and send out. 
	Due to the nature of input in java, I filtered out messages sent from yourself so that you wouldn't see:
> hello world
USR 50037: hello world
but instead, only > hello world.
When a client quits and the server can no longer read from that stream, it closes the ServerThread along with any streams associated with it, and removes it from the running list of streams. 
	Whenever new connections are made, they have to pass through SSL in order to make the connection secure and prevent unwanted parties from reading messages. This is done by using the keys on the server side and client side to authenticate each other, and then create a trusted connection. All data is then run only through SSL using these trusted SSLSocket connections.